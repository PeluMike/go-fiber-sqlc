// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comments.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const createPostComment = `-- name: CreatePostComment :one


INSERT INTO comments (post_id, user_id, comment) VALUES ($1, $2, $3)
RETURNING id::text, comment, user_id, post_id, to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at
`

type CreatePostCommentParams struct {
	PostID  uuid.NullUUID `json:"post_id"`
	UserID  uuid.NullUUID `json:"user_id"`
	Comment string        `json:"comment"`
}

type CreatePostCommentRow struct {
	ID        string        `json:"id"`
	Comment   string        `json:"comment"`
	UserID    uuid.NullUUID `json:"user_id"`
	PostID    uuid.NullUUID `json:"post_id"`
	CreatedAt string        `json:"created_at"`
}

func (q *Queries) CreatePostComment(ctx context.Context, arg CreatePostCommentParams) (CreatePostCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createPostComment, arg.PostID, arg.UserID, arg.Comment)
	var i CreatePostCommentRow
	err := row.Scan(
		&i.ID,
		&i.Comment,
		&i.UserID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const getPostComment = `-- name: GetPostComment :many
SELECT id, post_id, user_id, comment, 
       to_char(created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at
FROM comments
WHERE post_id = $1
`

type GetPostCommentRow struct {
	ID        uuid.UUID     `json:"id"`
	PostID    uuid.NullUUID `json:"post_id"`
	UserID    uuid.NullUUID `json:"user_id"`
	Comment   string        `json:"comment"`
	CreatedAt string        `json:"created_at"`
}

func (q *Queries) GetPostComment(ctx context.Context, postID uuid.NullUUID) ([]GetPostCommentRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostComment, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostCommentRow
	for rows.Next() {
		var i GetPostCommentRow
		if err := rows.Scan(
			&i.ID,
			&i.PostID,
			&i.UserID,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
