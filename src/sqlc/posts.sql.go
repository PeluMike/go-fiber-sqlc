// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: posts.sql

package sqlc

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createPost = `-- name: CreatePost :one


INSERT INTO posts (post, user_id) VALUES ($1, $2)
RETURNING id, post, user_id, created_at::date, updated_at::date
`

type CreatePostParams struct {
	Post   string    `json:"post"`
	UserID uuid.UUID `json:"user_id"`
}

type CreatePostRow struct {
	ID        uuid.UUID `json:"id"`
	Post      string    `json:"post"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.Post, arg.UserID)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.Post,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByUserID = `-- name: GetPostsByUserID :many
SELECT posts.id, posts.post, posts.user_id, to_char(posts.created_at, 'YYYY-MM-DD HH24:MI:SS') AS created_at, to_char(posts.updated_at, 'YYYY-MM-DD HH24:MI:SS') AS updated_at
FROM posts
LEFT JOIN 
  comments ON posts.id = comments.post_id
WHERE posts.user_id = $1
`

type GetPostsByUserIDRow struct {
	ID        uuid.UUID `json:"id"`
	Post      string    `json:"post"`
	UserID    uuid.UUID `json:"user_id"`
	CreatedAt string    `json:"created_at"`
	UpdatedAt string    `json:"updated_at"`
}

func (q *Queries) GetPostsByUserID(ctx context.Context, userID uuid.UUID) ([]GetPostsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIDRow
	for rows.Next() {
		var i GetPostsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Post,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
